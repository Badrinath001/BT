# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LpLLy6Nufih2aZVE8MXXulVGdHVYnEJE
"""

import numpy as np
import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

class AnomalyDetectionEnsemble:
    def __init__(self, sequence_length=10, isolation_forest_contamination=0.1, lstm_units=50, ensemble_threshold=0.5):
        self.sequence_length = sequence_length
        self.isolation_forest = IsolationForest(
            contamination=isolation_forest_contamination,
            random_state=42
        )
        self.lstm_model = self._build_lstm_model(lstm_units)
        self.scaler = StandardScaler()
        self.ensemble_threshold = ensemble_threshold

    def _build_lstm_model(self, lstm_units):
        model = Sequential([
            LSTM(lstm_units, input_shape=(self.sequence_length, 1), return_sequences=True),
            Dropout(0.2),
            LSTM(lstm_units // 2),
            Dropout(0.2),
            Dense(1)
        ])
        model.compile(optimizer='adam', loss='mse')
        return model

    def _prepare_sequences(self, data):
        X, y = [], []
        for i in range(len(data) - self.sequence_length):
            X.append(data[i:i + self.sequence_length])
            y.append(data[i + self.sequence_length])
        return np.array(X), np.array(y)

    def fit(self, data, epochs=50, verbose=1):
        # Scale data
        scaled_data = self.scaler.fit_transform(data.reshape(-1, 1))
        # Fit Isolation Forest
        self.isolation_forest.fit(scaled_data)
        # Prepare sequences and fit LSTM
        X, y = self._prepare_sequences(scaled_data)
        self.lstm_model.fit(X, y, epochs=epochs, verbose=verbose, validation_split=0.2)

    def predict(self, data):
        scaled_data = self.scaler.transform(data.reshape(-1, 1))
        # Isolation Forest predictions (-1 for anomalies, 1 for normal)
        if_predictions = self.isolation_forest.predict(scaled_data)
        if_scores = self.isolation_forest.score_samples(scaled_data)
        # LSTM predictions
        X, _ = self._prepare_sequences(scaled_data)
        lstm_predictions = self.lstm_model.predict(X, verbose=0)
        lstm_scores = np.abs(scaled_data[self.sequence_length:] - lstm_predictions.reshape(-1, 1))
        # Ensemble: combine results
        combined_scores = (if_scores[self.sequence_length:] + lstm_scores.flatten()) / 2
        anomalies = combined_scores > self.ensemble_threshold
        return anomalies, if_scores, lstm_scores

# Example usage:
data = np.random.randn(200)  # Example time series for demonstration
model = AnomalyDetectionEnsemble()
model.fit(data)
anomalies, if_scores, lstm_scores = model.predict(data)
print(anomalies, if_scores, lstm_scores)